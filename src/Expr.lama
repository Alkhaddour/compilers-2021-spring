-- Expression evaluator
-- Author: Alhasan Alkhaddour M4138c

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)


public fun evalExpr (st, expr) {
  case expr of
    Const (c)        -> c
  | Var   (v)        -> st(v)
  | Binop (op, l, r) -> evalBinOp (st, expr)
  esac
}

public fun evalBinOp (st, Binop(op, l, r)) {
  case op of
    "!!" -> evalExpr(st, l) !! evalExpr(st, r)
  | "&&" -> evalExpr(st, l) && evalExpr(st, r)
  | "==" -> evalExpr(st, l) == evalExpr(st, r)
  | "!=" -> evalExpr(st, l) != evalExpr(st, r)
  | "<=" -> evalExpr(st, l) <= evalExpr(st, r)
  | "<"  -> evalExpr(st, l) <  evalExpr(st, r)
  | ">=" -> evalExpr(st, l) >= evalExpr(st, r)
  | ">"  -> evalExpr(st, l) >  evalExpr(st, r) 
  | "+"  -> evalExpr(st, l) +  evalExpr(st, r)
  | "-"  -> evalExpr(st, l) -  evalExpr(st, r)
  | "*"  -> evalExpr(st, l) *  evalExpr(st, r)
  | "/"  -> evalExpr(st, l) /  evalExpr(st, r)
  | "%"  -> evalExpr(st, l) %  evalExpr(st, r)
  esac
}


