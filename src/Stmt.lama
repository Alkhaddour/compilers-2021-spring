-- Statement evaluator.
-- Author: Alhasan Alkhaddour M4138c

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case stmt of
    Assn  (s, e)   -> evalAssn  (c, stmt)
  | Seq   (s1, s2) -> evalSeq   (c, stmt)
  | Read  (s)      -> evalRead  (c, stmt)
  | Write (e)      -> evalWrite (c, stmt)
  | Skip           -> c
  esac
}

fun evalAssn ([s, w], Assn (param, e)) {
  [s <- [param, evalExpr (s, e)], w] 
}
fun evalSeq (c, Seq (s1, s2)) {
  eval (eval (c, s1), s2) 
}

fun evalRead ([s, w], Read (param)) {
  var res = readWorld (w);
  [s <- [param, res.fst], res.snd] 
}

fun evalWrite ([s, w], Write(e)) {
  [s, writeWorld(evalExpr (s, e), w)]
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
