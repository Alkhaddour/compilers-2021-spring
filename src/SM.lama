-- Stack machine.
-- Author: Alhasan Alkhaddour

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl (fun (acc, i) {
    case i of
	      READ      -> evalSMRead  (acc, i)
	    | WRITE     -> evalSMWrite (acc, i)
	    | BINOP (s) -> evalSMBinOp (acc, i)
	    | LD    (x) -> evalSMLD    (acc, i)
	    | ST    (x) -> evalSMST    (acc, i)
	    | CONST (n) -> evalSMConst (acc, i)
	esac
  }, c, getBuffer(insns))
}

fun evalSMRead ([st, s, w], READ) {
  var res = readWorld (w);
  [res[0]:st, s, res[1]]
}

fun evalSMWrite ([v:st, s, w], WRITE) {
  [st, s, writeWorld (v, w)]
}

fun evalSMBinOp ([r:l:st, s, w], BINOP (op)) {
  var res = 
	  case op of
		    "!!" -> l !! r
		  | "&&" -> l && r
	  	  | "==" -> l == r
	  	  | "!=" -> l != r
		  | "<=" -> l <= r
		  | "<"  -> l <  r
		  | ">=" -> l >= r	
		  | ">"  -> l >  r  
		  | "+"  -> l +  r
		  | "-"  -> l -  r
		  | "*"  -> l *  r
		  | "/"  -> l /  r
		  | "%"  -> l %  r
		  esac;
  [res:st, s, w]
}

fun evalSMLD ([st, s, w], LD (x)) {
  [s (x):st, s, w]
}

fun evalSMST ([v:st, s, w], ST (param)) {
  [st, s <- [param, v], w]
}

fun evalSMConst ([st, s, w], CONST (v)) {
  [v:st, s, w]
}


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}


-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions

fun compileExpr (expr) {
  case expr of
	    Const (n)        -> compileExprConst (expr)
	  | Var   (v)        -> compileExprVar   (expr)
	  | Binop (op, l, r) -> compileExprBinOp (expr)
	  esac
}

fun compileExprVar (Var (v)) {
  singletonBuffer(LD(v))
}

fun compileExprConst (Const (n)) {
  singletonBuffer (CONST(n))
}

fun compileExprBinOp(Binop (op, l, r)) {
  -- <+> Infix syn of concatBuffer
  -- <+  Infix syn of addBuffer
  compileExpr(l) <+> compileExpr(r) <+ BINOP (op)
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
	    Assn  (s, e)   -> compileStmtAssn  (stmt)
	  | Seq   (s1, s2) -> compileStmtSeq   (stmt)
	  | Read  (s)      -> compileStmtRead  (stmt)
	  | Write (e)      -> compileStmtWrite (stmt)
	  | Skip           -> emptyBuffer      ()
	  esac
}

fun compileStmtAssn (Assn (v, expr)) {
  compileExpr (expr) <+ ST (v)
}

fun compileStmtSeq (Seq (s1, s2)) {
  compileSM(s1) <+> compileSM(s2)
}

fun compileStmtRead (Read (v)) {
  listBuffer({READ, ST (v)})
}

fun compileStmtWrite (Write (e)) {
  compileExpr (e) <+ WRITE
}

